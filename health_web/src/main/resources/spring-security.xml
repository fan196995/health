<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

<!--    拦截规则-->
    <!--    http：用于定义相关权限控制
    指定哪些资源不需要进行权限校验，可以使用通配符-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>

<!--    auto-config：是否自动配置
    设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
    设置为false时需要显示提供登录表单配置，否则会报错
    use-expressions：用于指定intercept-url中的access属性是否使用表达式-->
    <security:http auto-config="true" use-expressions="true">
<!--        /**拦截所有路径-->

        <!--
        intercept-url：定义一个拦截规则
        pattern：对哪些url进行权限控制
        access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，请求的用户只需拥有其中的一个角色就能成功访问对应的URL
        isAuthenticated()：已经经过认证（不是匿名用户）
    -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/**"  access="isAuthenticated()" />

<!--        form-login 定义表单登陆信息-->
        <security:form-login login-page="/login.html"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/pages/main.html"
                             always-use-default-target="true"/>

        <security:headers>
            <!--   frame-options 控制页面中嵌套frame（访问其它页面，把其它页面的内容展示在这个页面上)
         policy 使用的策略:
             DENY: 不允许访问
             SAMEORIGIN: 同域可以访问
             ALLOW-FROM: 指定url可以访问
          -->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>
    <!--
       logout：退出登录
       logout-url：退出登录操作对应的请求路径
       logout-success-url：退出登录后的跳转页面
    -->

<!--        invalidate-session 清空session-->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true" />

    <!--
           csrf：对应CsrfFilter过滤器
           disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
       -->
    <security:csrf disabled="true"></security:csrf>

    </security:http>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

<!--    认证管理器-->
    <security:authentication-manager>
<!--        认证信息提供者-->
<!--        <security:authentication-provider>-->
<!--            配置了user-service-ref，就不要配置security:user-service-->
        <security:authentication-provider user-service-ref="springSecurityUserService">
        <!--指定密码加密策略-->
        <security:password-encoder ref="passwordEncoder"></security:password-encoder>
<!--            <security:user-service>
         &lt;!&ndash;       name: 登陆的用户名  password:登陆的密码
                authorities: 指定的权限(既可以是角色名也可以权限名)
                authorities与上面access一致才能访问
               {noop}使用的是明文，no operation 表示当前使用的密码为明文。表示当前密码不需要加密
        &ndash;&gt;
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>

        <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />

    <bean id="springSecurityUserService" class="com.itheima.health.security.SpringSecurityUserService"/>

<!--    开启spring注解-->
    <context:spring-configured></context:spring-configured>
</beans>